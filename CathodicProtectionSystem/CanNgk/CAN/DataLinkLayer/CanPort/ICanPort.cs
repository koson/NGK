using System;
using System.Collections.Generic;
using System.Text;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Drawing.Design;
using NGK.CAN.DataLinkLayer.Message;
using NGK.CAN.DataLinkLayer.CanPort.Design;

//========================================================================================
namespace NGK.CAN.DataLinkLayer.CanPort
{
    //------------------------------------------------------------------------------------
    /// <summary>
    /// Интерфейс, который должны реализовать все физические CAN-адаптеры.
    /// </summary>
    [Description("Интерфейс реализюет основной функционал для работы с различными CAN-портами")]
    [TypeConverter(typeof(ICanPortTypeConverter))]
    [Editor(typeof(ICanPortUITypeEditor), typeof(UITypeEditor))]
    public interface ICanPort: IDisposable, ISerializable
    {
        //--------------------------------------------------------------------------------
        #region Fields And Properties
        //--------------------------------------------------------------------------------
        /// <summary>
        /// Возвращает наименование CAN-порта
        /// </summary>
        [Browsable(true)]
        [ReadOnly(false)]
        [Category("Настройки")]
        [DisplayName("CAN-Порт")]
        [Description("Наименование CAN-порта")]
        String PortName
        { get; set; }
        //--------------------------------------------------------------------------------
        /// <summary>
        /// Возвращает скорость передачи данных
        /// </summary>
        [Browsable(true)]
        [ReadOnly(false)]
        [Category("Настройки")]
        [DisplayName("Скорость обмена")]
        [Description("Скорость обмена данными через CAN-порт")]
        BaudRate BitRate
        {
            get;
            set;
        }
        //--------------------------------------------------------------------------------
        /// <summary>
        /// Возвращает тип аппаратного обеспечения
        /// </summary>
        [Browsable(true)]
        [ReadOnly(true)]
        [Category("Система")]
        [DisplayName("Тип порта")]
        [Description("Тип аппаратного обечпечения порта")]
        String HardwareType
        {
            get;
        }
        //--------------------------------------------------------------------------------
        /// <summary>
        /// Возвращает наименование производителя
        /// </summary>
        [Browsable(true)]
        [ReadOnly(true)]
        [Category("Система")]
        [DisplayName("Производитель порта")]
        [Description("Производитель аппаратного обеспечения порта")]
        String Manufacturer
        { get; }
        //--------------------------------------------------------------------------------
        /// <summary>
        /// Возвращает версию аппаратного обеспечения
        /// </summary>
        [Browsable(true)]
        [ReadOnly(true)]
        [Category("Система")]
        [DisplayName("Версия аппаратуры")]
        [Description("Версия аппаратного обеспечения порта")]
        Version HardwareVersion
        { get; }
        //--------------------------------------------------------------------------------
        /// <summary>
        /// Возвращает версию программного обеспечения аппаратуры
        /// </summary>
        [Browsable(true)]
        [ReadOnly(true)]
        [Category("Система")]
        [DisplayName("Версия ПО")]
        [Description("Версия ПО драйвера порта")]
        Version SoftwareVersion
        { get; }
        //--------------------------------------------------------------------------------
        /// <summary>
        /// Возвращает true - если драйвер порта открыт
        /// </summary>
        [Browsable(true)]
        [ReadOnly(true)]
        [Category("Настройки")]
        [DisplayName("Порт открыт")]
        [Description("Указывает состояние драйвера CAN-порта")]
        Boolean IsOpen
        { get; }
        //--------------------------------------------------------------------------------
        /// <summary>
        /// Возвращает текущее состояние порта 
        /// (Состояние порта: открыт/закрыт, активен/неактивен,)
        /// </summary>
        CanPortStatus PortStatus
        { get; }
        //--------------------------------------------------------------------------------
        /// <summary>
        /// Режим работы CAN-порта
        /// </summary>
        PortMode Mode
        {
            get;
            set;
        }
        //--------------------------------------------------------------------------------
        /// <summary>
        /// Формат кадра сообщения
        /// </summary>
        FrameFormat FrameFormat
        {
            get;
            set;
        }
        //--------------------------------------------------------------------------------
        /// <summary>
        /// Разрешает драйверу порта передачу служебных сообщений
        /// (поддерживается некоторыми типами адаптеров)
        /// </summary>
        Boolean ErrorFrameEnable
        {
            get;
            set;
        }
        //--------------------------------------------------------------------------------
        /// <summary>
        /// Возворащает количество сообщений в приёмном буфере портра
        /// доступных для чтения.
        /// </summary>
        /// <returns>Количество сообщений в приёмном буфере порта</returns>
        Int32 MessagesToRead
        { get; }
        //--------------------------------------------------------------------------------
        #endregion
        //--------------------------------------------------------------------------------
        #region Methods
        //--------------------------------------------------------------------------------
        /// <summary>
        /// Открывает CAN-порт
        /// </summary>
        void Open();
        //--------------------------------------------------------------------------------
        /// <summary>
        /// Закрыть CAN-порт
        /// </summary>
        void Close();
        //--------------------------------------------------------------------------------
        /// <summary>
        /// Переводит порт в состояние (Passive) Init и сбрасывает настройки фильтра сообщений
        /// </summary>
        void Reset();
        //--------------------------------------------------------------------------------
        /// <summary>
        /// Переводит порт в состояние Active
        /// </summary>
        void Start();
        //--------------------------------------------------------------------------------
        /// <summary>
        /// Переводит порт в состояние Passive (Init)
        /// </summary>
        void Stop();
        //--------------------------------------------------------------------------------
        /// <summary>
        /// Записывает в порт сообщение (кадр)
        /// </summary>
        /// <param name="identifier">Идентификатор сообщения</param>
        /// <param name="frameType">Тип сообщения</param>
        /// <param name="frameFormat">Формат сообщения</param>
        /// <param name="data">Данные сообщения (0...8 байт)</param>
        void WriteMessage(UInt32 identifier, FrameType frameType,
            FrameFormat frameFormat, Byte[] data);
        //--------------------------------------------------------------------------------
        /// <summary>
        /// Записывает в порт сообщение
        /// </summary>
        /// <param name="message">Сообщение</param>
        void Write(Frame message);
        //--------------------------------------------------------------------------------
        /// <summary>
        /// Читает сообщение из CAN-порта
        /// </summary>
        /// <param name="message">Прочитанное сообщение</param>
        /// <returns>Если буфер пуст возвращается false (message - не валиден)</returns>
        Boolean Read(out Frame message);
        //--------------------------------------------------------------------------------
        /// <summary>
        /// Читает указанное число сообщений из входного буфера. Если количество сообщений
        /// в буфере меньше указанного для прочтения, то возвращается фактическое количество
        /// прочитанных сообщений
        /// </summary>
        /// <param name="count">Число сообщений для чтения</param>
        /// <returns>Прочитанные сообщения</returns>
        Frame[] ReadMessages(int count);
        //--------------------------------------------------------------------------------
        /// <summary>
        /// Читает все доступные сообещния из входного буфера
        /// </summary>
        /// <returns>Прочитанные сообщения</returns>
        Frame[] ReadMessages();
        //--------------------------------------------------------------------------------
        #endregion
        //--------------------------------------------------------------------------------
        #region Events
        //--------------------------------------------------------------------------------
        /// <summary>
        /// Событие по приёму сообщения
        /// </summary>
        event EventHandler MessageReceived;
        //--------------------------------------------------------------------------------
        /// <summary>
        /// Событие при приёме сообщения Error Frame
        /// </summary>
        event EventHandlerErrorRecived ErrorReceived;
        //--------------------------------------------------------------------------------
        /// <summary>
        /// Событие происходит когда порт окрыт, преходит в режим
        /// PortIsActive PortIsPassive PortReset
        /// </summary>
        event EventHandlerPortChangesStatus PortChangedStatus;
        //--------------------------------------------------------------------------------
        #endregion
        //--------------------------------------------------------------------------------
    }
    //------------------------------------------------------------------------------------
}
//========================================================================================
// End Of File